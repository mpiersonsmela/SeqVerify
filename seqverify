#!/usr/bin/env python
 
import argparse
import os
import sys
from seqver_functions import *
from seqver_plots import *
from seqver_genomeupdate import *
from seqver_lofFinder import *

parser = argparse.ArgumentParser()

#Sample call:
#seqverify --output S04 --reads_1 S04_1.fastq --reads_2 S04_2.fastq --genome chm13v2.0.fa --inexact T2A-mGreenLantern.fa T2A-tdTomato.fa transposons_in_S04.fa unwanted_plasmids.fa --granularity 500 --threads 15
#seqverify --output c5 --reads_1 chr5_1.fastq --reads_2 chr5_2.fastq --genome chr5_original.fa  --exact commands.txt --threads 15 --max_mem 8G

#Parses commandline arguments:
#Main arguments
parser.add_argument('--output', type=str, required=False, default="output") #Name of the output folder
parser.add_argument('--reads_1', type=str, required=False) #Name/Path of First .fq file for reads
parser.add_argument('--reads_2', type=str, required=False) #Name/Path of Second .fq file for reads
parser.add_argument('--inexact', type=str, required=False, nargs='+') #Name/Path of transgenes to be appended to the genome as extra sequences
parser.add_argument('--exact', type=str, required=False) #Name/Path of command file instructing where to insert known-insertion transgenes 
parser.add_argument('--del_temp', action='store_const',const=False, required=False, default=False) #HIGHLY RECOMMENDED - Option to delete temporary files when the pipeline is done

#Genome arguments
parser.add_argument('--genome', type=str, required=False, default=f"{os.getcwd()}/seqverify_defaults/chm13v2.0.fa") #Name/Path of genome file (CHM13 recommended) used to perform everything but variant calling.

#KRAKEN2 arguments
parser.add_argument('--kraken', action='store_const',const=True, required=False,default=False) #Flag enabling KRAKEN2/BRACKEN analysis
parser.add_argument('--database',type=str,required=False, default=f"{os.getcwd()}/seqverify_defaults/seqverify_database") #Path to KRAKEN2 database

#Insertion Site Detection Arguments
parser.add_argument('--granularity',type=int, required=False, default=500) #How far apart two insertions can be to count as the same insertion site
parser.add_argument('--threads',type=int,required=False, default=1) #How many threads seqverify can use
parser.add_argument('--max_mem', type=str, required=False, default='16G') #Max memory allowed, ending in capital "G" or "M"
parser.add_argument('--min_matches', type=int, required=False,default=1) #How many times an insertion needs to align to the reference genome to show up in the readout
parser.add_argument('--start', type=str, required=False, default="beginning") #Check GitHub, TL;DR: Setting this to "1" will only run the single-threaded portion of the pipeline, "2" will only run the multi-threaded portion
parser.add_argument('--keepgoing',action='store_const',const=True,required=False,default=True) #continue to next part after completing

#CNV/Plotting Arguments
parser.add_argument('--manual_plots',action='store_const',const=True,required=False,default=False) #Flag enabling matplotlib plots instead of IGV plots 
parser.add_argument('--bin_size',type=int, required=False, default=100000) #If manual plots are enabled, the size of each bin in the histogram

#Variant Calling Arguments
parser.add_argument('--variant_calling',nargs=2,type=str,required=False) #Space-separated: the Path/File to the hg38 genome, the SnpEff.jar config path, the clinvar DB path
parser.add_argument('--variant_intensity',type=str,required=False,default="MODERATE") #Minimum severity needed for a variant to show up in the readout, can be set to "MODIFIER", "LOW", "MODERATE", or "HIGH"

#Other
parser.add_argument('--download_defaults',action='store_const',const=True,required=False,default=False) #Downloads hg38.p14, CHM13 V2.0, and the PFPlus-8GB KRAKEN2 DB for ease of use. Terminates the program after doing that

args = parser.parse_args()


if args.download_defaults: #If --download_defaults is set, downloads the three databases and quits the program
    #Note:  These FTP links are likely to change over time and break the command. 
    #       Please open an issue on GitHub if they do! https://github.com/mpiersonsmela/SeqVerify
    os.system('mkdir seqverify_defaults')

    #Downloads chm13v2.0 as a reference genome for everything except the variant calling
    os.system('curl -OJX GET "https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/CHM13/assemblies/analysis_set/chm13v2.0.fa.gz" --output-dir seqverify_defaults')
    os.system('gunzip seqverify_defaults/chm13v2.0.fa.gz')

    #Downloads hg38 as a reference genome for the variant calling
    os.system('curl -OJX GET "http://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/latest/hg38.fa.gz" --output-dir seqverify_defaults')
    os.system('gunzip seqverify_defaults/hg38.fa.gz')

    #Downloads a KRAKEN-valid 8GB database, PlusPF_8GB
    os.system('mkdir seqverify_defaults/seqverify_database')
    os.system('curl -OJX GET "https://genome-idx.s3.amazonaws.com/kraken/k2_pluspf_08gb_20230605.tar.gz" --output-dir seqverify_defaults')
    os.system('tar -xzf seqverify_defaults/k2_pluspf_08gb_20230605.tar.gz -C seqverify_database')

    #Downloads the snpEff config file for ease of access during variant calling
    os.system('curl -OJX GET "https://raw.githubusercontent.com/pcingola/SnpEff/master/config/snpEff.config" --output-dir seqverify_defaults')

    #Downloads the latest version of the ClinVar database for variant calling purposes
    os.system('curl -OJX GET "https://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/clinvar.vcf.gz" --output-dir seqverify_defaults')
    os.system('curl -OJX GET "https://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/clinvar.vcf.gz.tbi" --output-dir seqverify_defaults')
    os.system('gunzip seqverify_defaults/clinvar.vcf.gz')

    sys.exit(0)

output_name = args.output

#The pathFinder function detects whether arguments are paths or names and acts accordingly such that it can handle both cases for ease of use.
reads_1_path = pathFinder(args.reads_1)
reads_2_path = pathFinder(args.reads_2)
genome_source_path = pathFinder(args.genome)

marker_sources_path = [pathFinder(i) for i in args.inexact]
exact_path = pathFinder(args.exact)

granularity_threshold = args.granularity
if args.database != None:
    database = pathFinder(args.database)

min_matches = args.min_matches
bin_size = args.bin_size
threads = args.threads

#Checks for a bin size that CNVPytor will recognize
if args.bin_size != 100000:
    if args.bin_size % 100 == 0:
        bin_size = args.bin_size
    else:
        raise ValueError("Custom bin size not divisible by 100")

#Deals with memory logic, converts max_mem argument into number of bytes of memory requested in order to build optimal BWA indexing block size
if args.max_mem[-1] == "M":
    max_mem = int(args.max_mem[:-1])*1000000
elif args.max_mem[-1] == "G":
    max_mem = int(args.max_mem[:-1])*1000000000
elif type(args.max_mem) == 'int':
    max_mem = int(args.max_mem)

base_block = max_mem / 8
#Set Java max mem for Java subprocesses (snpEff, etc)
os.environ['_JAVA_OPTIONS'] = '-Xmx'+args.max_mem
os.system('echo $_JAVA_OPTIONS')

#Stores Variable/Folder Names:
folder = f"seqverify_{output_name}"
temp_folder =f"seqverify_temp_{output_name}"
marker_list_file = f"seqverify_{output_name}_transgene_list.fa"
genome_with_markers = f"seqverify_{output_name}_collated.fa"
aligned_with_markers = f"seqverify_{output_name}_markers.sam"
aligned_diff_chr = f"seqverify_{output_name}_markers_diff_chr.sam"
aligned_diff_chr_bam = f"seqverify_{output_name}_markers_diff_chr.bam"
header = f"seqverify_{output_name}_markers_header.sam"
overall_coverage = f"seqverify_{output_name}_markers_coverage.cov"
pytor = f"{output_name}.pytor"
pytor_gc = f"{output_name}_gc.pytor"
pytor_conf = f"{output_name}_genome_conf.py"
unaligned = f"seqverify_{output_name}_unaligned.sam"
unaligned_R1 = f"seqverify_{output_name}_unaligned_R1.fastq"
unaligned_R2 = f"seqverify_{output_name}_unaligned_R2.fastq"
variant_genome_aligned = f"seqverify_{output_name}_variant.sam"
variant_genome_aligned_bam = f"seqverify_{output_name}_variant.bam"
variant_vcf = f"seqverify_{output_name}.vcf"
variant_vcf_ann = f"seqverify_{output_name}.ann.vcf"
bed_file = f"{output_name}.bed"

if args.start == "beginning" or args.start == "all":
    #Preliminary Work - Generates the output folder given a specified --output string as well as the temp folder for the pipeline to work within
    os.system(f'mkdir {folder}')
    os.system(f'mkdir {temp_folder}')

    #Automatic Preparation of Collated Genome:
    #Collates all markers/transgenes into a single FASTA file for ease of handling

    if exact_path != None:
        commands = commandHandler(genome_source_path,exact_path,temp_folder,genome_with_markers)
    
    if marker_sources_path != []:
        if exact_path == None:
            #Copies the reference genome into a new FASTA file that the transgenes will also be added to
            os.system(f'cp {genome_source_path} {temp_folder}/{genome_with_markers}')

        for file in marker_sources_path: 
            os.system(f'echo "$(cat {file})" >> {temp_folder}/{marker_list_file}') 

        #Adds the transgenes to the new "collated" FASTA file
        os.system(f'echo "$(cat {temp_folder}/{marker_list_file})" >> {temp_folder}/{genome_with_markers}')

     #Builds the indices for the genome that has now been augmented with the transgenes, necessary for alignment
    os.system(f'bwa index -b {base_block} {temp_folder}/{genome_with_markers}')
    os.system(f'cp {temp_folder}/{genome_with_markers} {folder}/{genome_with_markers}')
    if args.keepgoing:
        print("Finished beginning, continuing to align")
        args.start = "align"

if args.start == "align" or args.start == "all":
    #Beginning of multithreaded part:

    #Aligns the new genome using BWA-MEM
    os.system(f'bwa mem -M -t {threads} {temp_folder}/{genome_with_markers} {reads_1_path} {reads_2_path} > {temp_folder}/{aligned_with_markers}')
    if args.keepgoing:
        print("Finished align, continuing to markers")
        args.start = "markers"
    
if args.start == "markers" or args.start == "all":
    if marker_sources_path != []:
        #Saves all names of transgenes/markers we want to find insertion sites of into a list for later usage and makes it into a string
        with open(f'{temp_folder}/{marker_list_file}') as f:
            marker_list = [i[1:].strip() for i in f if i.startswith('>')]
        markers = "|".join(marker_list)
    
        #Uses the "markers" string as a regular expression to find reads in the newly-aligned SAM file that align to a transgene and have a mate on a human chromosome
        #Exports these reads into a new SAM file, "diff_chr"
        os.system(f"samtools view -h -@ {threads} {temp_folder}/{aligned_with_markers} |gawk '{{if ((($3 ~ /^({markers})/)&&($7 ~ /chr([0-9]+|[XYM])/))||($1 ~ /^@/)) print $0}};' > {temp_folder}/{aligned_diff_chr}")

        #Functions imported from seqver_functions, refer to comments there for details on their functioning.
        #Takes "diff_chr", generates a .txt human-readable readout of the insertion sites, places it into the output folder.
        data = group(f'{temp_folder}/{aligned_diff_chr}')
        insertions = compress(data,granularity_threshold)
        readout(folder,insertions,marker_list,min_matches)

    #Sorts the previously-aligned SAM file to a BAM file and places it in the main output folder for both potential post-pipeline manual viewing and for later steps in the pipeline itself 
    os.system(f"samtools sort -@ {threads} {temp_folder}/{aligned_with_markers} > {folder}/{aligned_diff_chr_bam}")
    os.system(f"samtools index -@ {threads} {folder}/{aligned_diff_chr_bam}")

    #Creates a header from the BAM file
    os.system(f'samtools view -@ {threads} -H {folder}/{aligned_diff_chr_bam} > {temp_folder}/{header}')
    
    if args.keepgoing:
        print("Finished markers, continuing to CNV")
        args.start = "cnv"

if args.start == "cnv" or args.start == "all":
    #CNVPytor Logic/Commands, these create a .pytor file for the BAM file and go through all the steps necessary to generate a final plot of the entire genome for ease of CNV analysis
    #Refer to github.com/abyzovlab/CNVpytor/tree/master/cnvpytor for more information
    if commands == []:
        os.system(f'cnvpytor -root {folder}/{pytor} -rd {folder}/{aligned_diff_chr_bam}')
        os.system(f'cnvpytor -root {folder}/{pytor} -his {bin_size}')
        os.system(f'cnvpytor -root {folder}/{pytor} -partition {bin_size}')
        os.system(f'cnvpytor -root {folder}/{pytor} -call {bin_size} > {folder}/calls.{bin_size}.tsv')
        os.system(f'cnvpytor -root {folder}/{pytor} -plot manhattan {bin_size} -o {folder}/{output_name}.png')
    else:
        genome_configurator(temp_folder,pytor_conf,pytor_gc,genome_with_markers,header)
        os.system(f'cnvpytor -conf {temp_folder}/{pytor_conf} -root {folder}/{pytor} -rd {folder}/{aligned_diff_chr_bam}')
        os.system(f'cnvpytor -conf {temp_folder}/{pytor_conf} -root {folder}/{pytor} -his {bin_size}')
        os.system(f'cnvpytor -conf {temp_folder}/{pytor_conf} -root {folder}/{pytor} -partition {bin_size}')
        os.system(f'cnvpytor -conf {temp_folder}/{pytor_conf} -root {folder}/{pytor} -call {bin_size} > {folder}/calls.{bin_size}.tsv')
        os.system(f'cnvpytor -conf {temp_folder}/{pytor_conf} -root {folder}/{pytor} -plot manhattan {bin_size} -o {folder}/{output_name}.png')

    if args.keepgoing:
        print("Finished CNVpytor, continuing to plots")
        args.start = "plots"

if args.start == "plots" or args.start == "all":
    try:
        region_bed(temp_folder,header,commands,marker_list,bed_file) #Creates a bed file to be used as coordinates for the IGV screenshot engine.
    except NameError: #regenerate commands if the beginning step was skipped
        commands = commandHandler(genome_source_path,exact_path,temp_folder,genome_with_markers)
        with open(f'{temp_folder}/{marker_list_file}') as f:
            marker_list = [i[1:].strip() for i in f if i.startswith('>')]
        markers = "|".join(marker_list)
        region_bed(temp_folder,header,commands,marker_list,bed_file)
    #Plotting Logic
    if not args.manual_plots:
        #If IGV plots are used (default option), creates plots of the transgenes through IGV: the .bed file here is used to direct IGV towards the relevant regions of the genome
        igvScreenshot(temp_folder,folder,f'{folder}/{aligned_diff_chr_bam}',f'{temp_folder}/{genome_with_markers}',bed_file)
    else:
        #If IGV plots are not used, creates matplotlib plots of the transgene copy numbers: the .bed file here is used to direct samtools depth towards the relevant regions to cut down time.
        os.system(f'samtools depth -b {bed_file} {folder}/{aligned_diff_chr_bam} > {temp_folder}/{overall_coverage}')
        #Creates the histograms (refer to seqver_plots.py for more information)
        chrHistograms(f'{temp_folder}/{overall_coverage}',marker_list)
        #Moves the plots and the coverage maps to the main and temp folders, respectively.
        os.system(f'mv fig_* {folder}')
        os.system(f'mv *.cov {temp_folder}')
        
    if args.keepgoing:
        print("Finished plots, continuing to Kraken (if enabled)")
        args.start = "kraken"

if args.start == "kraken" or args.start == "all":
    #KRAKEN2/BRACKEN system
    if args.kraken:
        #If KRAKEN is enabled (default: not enabled), runs the KRAKEN pipeline.
        #Pulls out all unclassified reads (flag 0x13 means "paired (1), unmapped (4), mate unmapped (8)") and stores them in a SAM file
        os.system(f'samtools view -f 13 -@ {threads} {folder}/{aligned_diff_chr_bam}> {temp_folder}/{unaligned}')

        #Separates the SAM file of all unaligned reads into its forward and backward reads
        os.system(f'samtools fastq -@ {threads} {temp_folder}/{unaligned} -1 {temp_folder}/{unaligned_R1} -2 {temp_folder}/{unaligned_R2}')

        #Runs KRAKEN2, generating a report and placing it in the main output folder
        os.system(f'kraken2 --threads {threads} --db {database} --report {folder}/classified_seqs_{output_name}.kreport --paired --classified-out {folder}/classified_seqs_{output_name}#.fq {temp_folder}/{unaligned_R1} {temp_folder}/{unaligned_R2} > {folder}/classified_{output_name}.kraken')

        #Runs BRACKEN, generating a report in the main output folder.  
        os.system(f'bracken -d {database} -i {folder}/classified_seqs_{output_name}.kreport -o {folder}/classified_seqs_{output_name}.bracken -r 150')

    if args.keepgoing:
        print("Finished kraken, continuing to variant calling (if enabled)")
        args.start = "variant"

if args.start == "variant" or args.start == "all":
    if args.variant_calling is not None and args.variant_calling != []:
        ##### Do the variant calling #####
        
        #Sets up the three variables needed for variant calling
        # 1) The genome to be re-aligned to (hg38, given that CHM13 clinvar does not work)
        # 2) The path to the config file
        # 3) The path to a valid annotation DB
        variant_genome_source_path = pathFinder(args.variant_calling[0]) #example: "seqverify_database/hg38.fa"
        #variant_config_path = args.variant_calling[1] #not used. Maybe add as optional argument?
        clinvardb_source_path = pathFinder(args.variant_calling[1]) #example: "seqverify_database/clinvar.vcf.gz" Note, vcf.gz.tbi file must also be present
        
        #realigning the reads to the new genome
        os.system(f"bwa index {variant_genome_source_path}") #already indexed
        os.system(f"samtools faidx {variant_genome_source_path}")
        
        bwa_cmd = f"bwa mem -M -t {threads} {variant_genome_source_path} {reads_1_path} {reads_2_path} > {temp_folder}/{variant_genome_aligned}"
        #print(bwa_cmd)
        
        exitcode = os.system(bwa_cmd)
        if exitcode!=0: sys.exit("BWA failed")
        
        os.system(f"samtools sort -@ {threads} {temp_folder}/{variant_genome_aligned} > {temp_folder}/{variant_genome_aligned_bam}") 
        os.system(f"samtools index -@ {threads} {temp_folder}/{variant_genome_aligned_bam}")
        
        #Generates the VCF through bcftools mpileup
        #Calls variants using bcftools call. -mv option outputs only variant sites
        #TODO: add multithreading (maybe split by chromosomes and then recombine)
        os.system(f"bcftools mpileup -Ou -f {variant_genome_source_path} {temp_folder}/{variant_genome_aligned_bam} | bcftools call -mv -Ov -o {temp_folder}/{variant_vcf}")
        
        #Runs snpEff, SnpSift to do a first pass of filtering the variants, saves everything in the main folder for post-pipeline analysis
        os.system(f"snpEff -v hg38 {temp_folder}/{variant_vcf} > {temp_folder}/{variant_vcf_ann}")
        os.system(f"SnpSift annotate -v {clinvardb_source_path} {temp_folder}/{variant_vcf_ann} > {folder}/{variant_vcf_ann}")
        
        #Further filter the reads, saves everything to a readout in the main folder
        mutation_logger(folder,variant_vcf_ann,args.variant_intensity)
    #If deletion of files is enabled (which is it by default), deletes the temp folder.
    #This is recommended, especially since temp files contain SAM files that can get to 100+ GB depending on the size of the original inputs.
if args.del_temp:
    os.system(f'rm -r {temp_folder}')
